<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LFramework解析：开篇</title>
      <link href="/post/063f864d6d92/"/>
      <url>/post/063f864d6d92/</url>
      
        <content type="html"><![CDATA[<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>目前其实已经有很多客户端框架了，但每个人对不同的框架有不同的看法，所以打算整合不同框架中认为更好模块。也是为了整理目前所学的所有知识吧。</p><p>本LFramework框架使用GameFramework框架的架构，即框架分成纯C#部分LFramework实现核心逻辑，并对外提供接口。LFrameworkUnity负责实现接口并提供Unity编辑器扩展。战斗部分目前不了解，先按我的理解划分一下LFramework，层层递进。</p><h3 id="非热更新"><a href="#非热更新" class="headerlink" title="非热更新"></a>非热更新</h3><h4 id="LFramework"><a href="#LFramework" class="headerlink" title="LFramework"></a>LFramework</h4><p>框架的最底层，纯C#实现。分为Core和Manager两部分。</p><h5 id="LFramework-Core"><a href="#LFramework-Core" class="headerlink" title="LFramework.Core"></a>LFramework.Core</h5><p>这部分是与引擎无关的模块核心。包括：事件、引用池、定时器、有限状态机、数据节点、数据表、日志。</p><h5 id="LFramework-Manager"><a href="#LFramework-Manager" class="headerlink" title="LFramework.Manager"></a>LFramework.Manager</h5><p>这部分将Core里的模块进行实例化并是其他所有模块的纯C#部分，并抛出需要实现的接口。其他模块包括：调试器、本地化、对象池、资源、场景、配置、声音、界面、流程</p><h4 id="LFrameworkUnity"><a href="#LFrameworkUnity" class="headerlink" title="LFrameworkUnity"></a>LFrameworkUnity</h4><p>负责将Core中的模块进行实例化、抛出实例化接口，实现Manager中的接口。提供Unity编辑器扩展。</p><h4 id="GameMain"><a href="#GameMain" class="headerlink" title="GameMain"></a>GameMain</h4><p>负责对LFrameworkUnity进行初始化和游戏开始流程。</p><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><p>战斗部分仅仅是进行划分，具体实现不在本系列当中。</p><h4 id="LFrameworkBattle"><a href="#LFrameworkBattle" class="headerlink" title="LFrameworkBattle"></a>LFrameworkBattle</h4><p>独立的战斗框架，负责将Core中的模块进行实例化，提供一个战斗框架。与LFrameworkUnity算是同级。只是战斗部分会放到服务器上运行，所以不能与Unity关联。</p><h4 id="GameView"><a href="#GameView" class="headerlink" title="GameView"></a>GameView</h4><p>游戏中通过Unity显示的部分，只会通过GameMain进行框架的接口调用，不与其他非热更新模块关联。</p><h4 id="BattleLogic"><a href="#BattleLogic" class="headerlink" title="BattleLogic"></a>BattleLogic</h4><p>游戏中的战斗模块，提供战斗的初始化和推进，可直接运行在服务器上。表现上，通过GameView进行表现？</p><h4 id="Config、Proto"><a href="#Config、Proto" class="headerlink" title="Config、Proto"></a>Config、Proto</h4><p>目前暂不知道如何划分。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p>LFramework解析：事件（Event）</p></li><li><p>LFramework解析：引用池（Reference Pool）</p></li><li><p>LFramework解析：定时器（Timer）</p></li><li><p>LFramework解析：有限状态机（Fsm）</p></li><li><p>LFramework解析：数据节点（Data Node）</p></li><li><p>LFramework解析：数据表（Data Table）</p></li><li><p>LFramework解析：日志（Log）</p></li><li><p>LFramework解析：调试器（Debugger）</p></li><li><p>LFramework解析：本地化（Localization）</p></li><li><p>LFramework解析：对象池（Object Pool）</p></li><li><p>LFramework解析：资源（Resources）</p></li><li><p>LFramework解析：场景（Scene）</p></li><li><p>LFramework解析：配置（Setting）</p></li><li><p>LFramework解析：声音（Sound）</p></li><li><p>LFramework解析：界面（UI）</p></li><li><p>LFramework解析：流程（Procedure）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 客户端 </category>
          
          <category> LFramework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> LFramework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity配置VS Code</title>
      <link href="/post/e559522c4d76/"/>
      <url>/post/e559522c4d76/</url>
      
        <content type="html"><![CDATA[<h2 id="配置C-运行环境"><a href="#配置C-运行环境" class="headerlink" title="配置C#运行环境"></a>配置C#运行环境</h2><h4 id="下载-NET-SDK并安装-https-dotnet-microsoft-com-zh-cn-download"><a href="#下载-NET-SDK并安装-https-dotnet-microsoft-com-zh-cn-download" class="headerlink" title="下载.NET SDK并安装 https://dotnet.microsoft.com/zh-cn/download"></a>下载.NET SDK并安装 <a href="https://dotnet.microsoft.com/zh-cn/download">https://dotnet.microsoft.com/zh-cn/download</a></h4><img src="/post/e559522c4d76/1_1.png" class=""><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>通过win + R，输入cmd打开命令提示符，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --info</span><br></pre></td></tr></table></figure><p>可以查看当前电脑上的.NET SDK 信息。如果没有信息，说明没有安装。</p><img src="/post/e559522c4d76/1_2.png" class=""><h2 id="在VS-Code中配置C-和Unity开发环境"><a href="#在VS-Code中配置C-和Unity开发环境" class="headerlink" title="在VS Code中配置C#和Unity开发环境"></a>在VS Code中配置C#和Unity开发环境</h2><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在VS Code提供了对Unity的支持后，只需要安装两个插件，一个是Unity，一个Unity Code Snippets。</p><p>其中.NET Install Tool、C#、C# Dev Kit依赖于Unity插件，会被自动安装。</p><img src="/post/e559522c4d76/2_1.png" class=""><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>有时候插件会识别不到本地已经安装的.NET SDK，所以可以直接通过配置文件指定.NET SDK的位置。</p><p>按ctrl + shift + p，然后在输入框中输入settings.json，打开用户设置</p><img src="/post/e559522c4d76/2_2.png" class=""><p>然后在json文件中加入配置项，path是安装目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&quot;dotnetAcquisitionExtension.existingDotnetPath&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;extensionId&quot;: &quot;ms-dotnettools.csharp&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;C:\\Program Files\\dotnet\\dotnet.exe&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;extensionId&quot;: &quot;ms-dotnettools.csdevkit&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;C:\\Program Files\\dotnet\\dotnet.exe&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;extensionId&quot;: &quot;visualstudiotoolsforunity.vstuc&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;C:\\Program Files\\dotnet\\dotnet.exe&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;extensionId&quot;: &quot;msazurermtools.azurerm-vscode-tools&quot;,</span><br><span class="line">        &quot;path&quot;: &quot;C:\\Program Files\\dotnet\\dotnet.exe&quot;</span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="在Unity中将VS-Code设置为默认编辑器"><a href="#在Unity中将VS-Code设置为默认编辑器" class="headerlink" title="在Unity中将VS Code设置为默认编辑器"></a>在Unity中将VS Code设置为默认编辑器</h2><h4 id="更新插件"><a href="#更新插件" class="headerlink" title="更新插件"></a>更新插件</h4><p>点击Window &#x2F; Package Manage打开界面，找到Visual Studio Editor并将其更新到最新版本。</p><img src="/post/e559522c4d76/3_1.png" class=""><h4 id="修改默认编辑器"><a href="#修改默认编辑器" class="headerlink" title="修改默认编辑器"></a>修改默认编辑器</h4><p>点击Edit &#x2F; Preferences 打开界面，再选择External Tools选项，修改脚本编辑器为VS Code。</p><img src="/post/e559522c4d76/3_2.png" class=""><h2 id="使用断点调试"><a href="#使用断点调试" class="headerlink" title="使用断点调试"></a>使用断点调试</h2><h4 id="在VS-Code中启动"><a href="#在VS-Code中启动" class="headerlink" title="在VS Code中启动"></a>在VS Code中启动</h4><img src="/post/e559522c4d76/4_1.png" class=""><h4 id="在Unity中同意启用"><a href="#在Unity中同意启用" class="headerlink" title="在Unity中同意启用"></a>在Unity中同意启用</h4><img src="/post/e559522c4d76/4_2.png" class=""><h4 id="打断点。鼠标放到代码的最左边单击出现红点表示成功。"><a href="#打断点。鼠标放到代码的最左边单击出现红点表示成功。" class="headerlink" title="打断点。鼠标放到代码的最左边单击出现红点表示成功。"></a>打断点。鼠标放到代码的最左边单击出现红点表示成功。</h4><img src="/post/e559522c4d76/4_3.png" class=""><h4 id="最后运行Unity就行，程序会停在断点处。"><a href="#最后运行Unity就行，程序会停在断点处。" class="headerlink" title="最后运行Unity就行，程序会停在断点处。"></a>最后运行Unity就行，程序会停在断点处。</h4><img src="/post/e559522c4d76/4_4.png" class=""><p>左上可以查看当前所有的局部变量信息。</p><p>中上可以控制程序走向。</p><p>鼠标直接放到变量上可以直接显示该变量的信息。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏引擎 </category>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#代码规范</title>
      <link href="/post/d08f3958b61a/"/>
      <url>/post/d08f3958b61a/</url>
      
        <content type="html"><![CDATA[<h2 id="对齐规范"><a href="#对齐规范" class="headerlink" title="对齐规范"></a>对齐规范</h2><ol><li><p>对齐方式为空格，缩进大小为4。</p></li><li><p>大括号换行。</p></li><li><p>if 和 for 这种，不省略{}。</p></li></ol><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ol><li><p>英文单词命名。禁止使用拼音或无意义的字母命名。</p></li><li><p>直观易懂。使用能够描述其功能或有意义的英文单词或词组。</p></li><li><p>不要采用下划线命名法。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int grand_value; // 错误：下划线命名。</span><br></pre></td></tr></table></figure><ol start="4"><li>常量、静态变量、类、结构体、属性、方法等名称采用大驼峰命名法。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public const int MaxHp = 100; // 常量</span><br><span class="line">public static float MaxSpeed = 100f; // 静态字段</span><br><span class="line">public class GameLogic</span><br><span class="line">&#123;</span><br><span class="line">    // 类</span><br><span class="line">&#125;</span><br><span class="line">public struct Position</span><br><span class="line">&#123;</span><br><span class="line">    // 结构体</span><br><span class="line">&#125;</span><br><span class="line">public int Id</span><br><span class="line">&#123;</span><br><span class="line">    // 属性</span><br><span class="line">    get;</span><br><span class="line">    set;</span><br><span class="line">&#125;</span><br><span class="line">public void SendMessage(string message)</span><br><span class="line">&#123;</span><br><span class="line">    // 方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>公有字段、保护字段、私有字段、方法形参、局部变量采用小驼峰命名法。（私有字段以下划线开头</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public int id; // 公有字段</span><br><span class="line">protected string name; // 保护字段</span><br><span class="line">private string _name; // 私有字段</span><br><span class="line">public void SendMessage(string message) // 方法形参</span><br><span class="line">&#123;</span><br><span class="line">    bool result = false; // 局部变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>接口命名以大写字母 I 开头</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface IState; // 接口</span><br></pre></td></tr></table></figure><ol start="7"><li>枚举命名以大写字母 E 开头</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public enum EGameType</span><br><span class="line">&#123;</span><br><span class="line">    Simple,</span><br><span class="line">    Hard</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><ol><li><p>声明变量时，一行只声明一个变量。</p></li><li><p>变量中，按共有、保护、私有分块</p></li><li><p>类的字段声明统一放置于类的最前端。</p></li><li><p>类的属性统一放置于类的字段和方法中间。</p></li><li><p>一行代码长度不要超过屏幕宽度。如果超过了，将超过部分换行。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Student</span><br><span class="line">&#123;</span><br><span class="line">    public int id;</span><br><span class="line">    public int name;</span><br><span class="line">    protected bool gender;</span><br><span class="line">    private string _score; // 分数</span><br><span class="line"></span><br><span class="line">    public int Age</span><br><span class="line">    &#123;</span><br><span class="line">        get;</span><br><span class="line">        set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 根据分数获取等级</span><br><span class="line">    private int Level(int score)</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><ol><li>公有和保护注释、类、枚举、结构体，采用&#x2F;&#x2F;&#x2F;形式自动产生XML标签格式的注释。（私有可以不用注释</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 用户名</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public string userName;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 用户名</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">protected string userName;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 用户名</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">private string _userName;</span><br><span class="line"></span><br><span class="line">private string _userName; // 用户名</span><br></pre></td></tr></table></figure><ol start="2"><li>公有方法和保护方法注释，采用&#x2F;&#x2F;&#x2F;形式自动产生XML标签格式的注释。（私有方法可以不用注释</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 通过用户ID获取用户名</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;userId&quot;&gt;用户ID&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;返回用户名&lt;/returns&gt;</span><br><span class="line">public string GetUserNameById(int userId)</span><br><span class="line">&#123;</span><br><span class="line">    // 代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 通过用户ID获取用户名</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;userId&quot;&gt;用户ID&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;返回用户名&lt;/returns&gt;</span><br><span class="line">protected string GetUserNameById(int userId)</span><br><span class="line">&#123;</span><br><span class="line">    // 代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通过用户ID获取用户名</span><br><span class="line">private string GetUserNameById(int userId)</span><br><span class="line">&#123;</span><br><span class="line">    // 代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>方法内的代码块注释。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void UpdateLogic()</span><br><span class="line">&#123;</span><br><span class="line">    // 攻击逻辑</span><br><span class="line"></span><br><span class="line">    // 移动逻辑</span><br><span class="line"></span><br><span class="line">    // 其他逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/post/895dcd45d182/"/>
      <url>/post/895dcd45d182/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>        正则表达式是一种文本模式，包括普通字符（例如：a 到 z 之间的字母）和特殊字符（称为“元字符”），可以用来描述和匹配字符串的特定模式。主要用于快速查找、替换、验证和提取文本数据。</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th align="left"><div style="width:80px">字符</div></th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”(.|\n)”的模式。</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td align="left">(?&#x3D;pattern)</td><td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?&#x3D;95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?&lt;&#x3D;pattern)</td><td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”(?&lt;&#x3D;95|98|NT|2000)Windows”能匹配”2000Windows”中的”Windows”，但不能匹配”3.1Windows”中的”Windows”。</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”(?&lt;!95|98|NT|2000)Windows”能匹配”3.1Windows”中的”Windows”，但不能匹配”2000Windows”中的”Windows”。</td></tr><tr><td align="left">x|y</td><td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="left">\cx</td><td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td align="left">\xn</td><td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="left">\num</td><td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table><thead><tr><th align="left"><div style="width:200px">运算符</div></th><th>描述</th></tr></thead><tbody><tr><td align="left">\</td><td>转义符</td></tr><tr><td align="left">(), (?:), (?&#x3D;), []</td><td>圆括号和方括号</td></tr><tr><td align="left">*, +, ?, {n}, {n,}, {n,m}</td><td>限定符</td></tr><tr><td align="left">^, $, \任何元字符、任何字符</td><td>定位点和序列（即：位置和顺序）</td></tr><tr><td align="left">|</td><td>替换，”或”操作  <br>字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 通用技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的个人博客开通了！！！</title>
      <link href="/post/e4cfe1a80f6b/"/>
      <url>/post/e4cfe1a80f6b/</url>
      
        <content type="html"><![CDATA[<img src="/post/e4cfe1a80f6b/01.jpg" class="">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
